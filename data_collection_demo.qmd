---
title: Extracting Data Demo
format: html
---
DEMO: The purpose of this document is to extract the data from PubMed, using the R entrez API solution.
# Demo

## Acquiring title, uid, date
```{r}
library(rentrez)
set_entrez_key("c14a6209a64f2dd809205225f00d76053007")

```

```{r}
query <- '"HIV" OR "AIDS" OR "human immunodeficiency virus" OR "acquired immunodeficiency syndrome"'

#for testing purposes I am only going to scrape one year
search_results <- entrez_search(db="pubmed", term=query, retmax=100, mindate="2023", maxdate="2024")
summary_data <- entrez_summary(db="pubmed", id=search_results$ids)

```


```{r}
articles <- lapply(summary_data, function(x) c(x$sorttitle, x$pubdate))

df <- do.call(rbind, articles)
knitr::kable(head(df))
write.csv(df, "data/sample_collection.csv")
```

## Acquiring number of times cited

```{r}

pmid_list <- c("2344532", "2445435")

get_citation_count <- function(pmid) {
  links <- entrez_link(dbfrom = "pubmed", db = "pubmed", LinkName = "pubmed_pubmed_citedin", id = pmid)
  
  cited_pmids <- links$links$pubmed_pubmed_citedin
  
  if (!is.null(cited_pmids)) {
    return(length(cited_pmids))
  } else {
    return(0)
  }
}

citation_counts <- sapply(pmid_list, get_citation_count)

results <- data.frame(PMID = pmid_list, Citation_Count = citation_counts)

print(results)

```

Downsides of this: It seems rather slow. Probably not a good idea to do this for everything unless we have finalized the search string. Maybe we could do this for a more specific time window as well?

# Demo on an Entire Year

```{r}
#query <- '"HIV" OR "AIDS" OR "human immunodeficiency virus" OR "acquired immunodeficiency syndrome"'
query = '("HIV" OR "AIDS") AND ("epidemic" OR "treatment" OR "prevention" OR "detection" OR "vaccine" OR "mathematical modeling" OR "prognosis" OR "case study" OR "healthcare" OR "public health" OR "immunology" OR "infectious diseases") NOT ("conference" OR "summit" OR "legal" OR "audiology" OR "non-HIV infections")'

all_articles <- list()

#adjust upper limit year as necessary, keeping it at 1990 for testing
for (year in 1990:1990) {
  cat("Fetching articles for year:", year, "\n")
  
  #  enable web history as demonstrated in the rentrez example on CRAN
  search_results <- entrez_search(
    db = "pubmed", 
    term = query, 
    mindate = as.character(year), 
    maxdate = as.character(year), 
    use_history = TRUE
  )
  cat('number of search results:', search_results$count, '\n')
  
  if (search_results$count == 0) {
    next
  }
  
  batch_size <- 100 
  for (start in seq(0, search_results$count - 1, by = batch_size)) {
    cat("Fetching batch starting at:", start, "\n")
    # Fetch summaries from the web history
    summary_data <- entrez_summary(
      db = "pubmed",
      web_history = search_results$web_history,
      retmax = batch_size,
      retstart = start
    )
    
    articles <- lapply(summary_data, function(x) c(x$uid, x$sorttitle, x$pubdate))
    batch_df <- do.call(rbind, articles)
    batch_df <- data.frame(batch_df, stringsAsFactors = FALSE)
    colnames(batch_df) <- c("Title", "PublicationDate")
    #batch_df$Year <- year # don't really need this
    
    all_articles[[paste0(year, "_", start)]] <- batch_df
  }
}

```

```{r}
final_df <- do.call(rbind, all_articles)
knitr::kable(head(final_df))

write.csv(final_df, "data/full_pubmed_hiv_articles.csv", row.names = FALSE)

cat("Data scraping complete. Saved results to 'data/full_pubmed_hiv_articles.csv'\n")


```

::: callout-note
one thing I am noticing is that the apostrophes are replaced with spaces, i.e. ' ', which might not be good down the line. However, using the sorttitle instead of title could be better as we don't have to do as much string transformation. Nevertheless, apostrophized words shoudn't be too important tbh.
:::

```{r}


```
